name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    # Put secrets into environment variables so powershell scripts can read them reliably
    env:
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}

    steps:
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          # Enable Remote Desktop (allow connections)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name 'fDenyTSConnections' -Value 0 -Force

          # NOTE: Disabling NLA / lowering security reduces safety.
          # If you want Network Level Authentication (recommended), set UserAuthentication=1 and SecurityLayer=2
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name 'UserAuthentication' -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name 'SecurityLayer' -Value 0 -Force

          # Remove existing firewall rule with same name (avoid duplicates)
          netsh advfirewall firewall delete rule name="RDP-Tailscale" || Write-Host "No existing rule to delete."

          # Allow TCP 3389 inbound (consider scoping this to Tailscale interface or specific IPs instead)
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389

          # Restart Remote Desktop Service to apply changes
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        shell: pwsh
        run: |
          # Build a 16-character strong password (4 upper, 4 lower, 4 digits, 4 special)
          $Upper = [char[]](65..90)
          $Lower = [char[]](97..122)
          $Number = [char[]](48..57)
          $Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))

          $rawPassword = @()
          $rawPassword += $Upper | Get-Random -Count 4
          $rawPassword += $Lower | Get-Random -Count 4
          $rawPassword += $Number | Get-Random -Count 4
          $rawPassword += $Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          # Convert to secure string and create user
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (Get-LocalUser -Name 'RDP' -ErrorAction SilentlyContinue) {
            Write-Host "Local user 'RDP' already exists. Updating password."
            # Update password
            $user = Get-LocalUser -Name 'RDP'
            $user | Set-LocalUser -Password $securePass
          } else {
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          }

          # Add groups (Administrators optional; use with caution)
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          # If you really need admin rights, uncomment the following:
          # Add-LocalGroupMember -Group "Administrators" -Member "RDP"

          # Export credentials to GitHub environment file (so subsequent steps can read them)
          # NOTE: avoid printing secrets to logs. Storing to GITHUB_ENV still exposes them to subsequent steps.
          Add-Content -Path $env:GITHUB_ENV -Value ("RDP_USER=RDP")
          Add-Content -Path $env:GITHUB_ENV -Value ("RDP_PASSWORD=$password")

          # Verify creation
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              Write-Error "User creation failed"
              exit 1
          } else {
              Write-Host "Created/updated local user 'RDP'."
          }

      - name: Install Tailscale
        shell: pwsh
        run: |
          # Use an explicit Tailscale MSI URL; update version if needed.
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest.msi"
          $installerPath = Join-Path $env:TEMP "tailscale.msi"

          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process -FilePath msiexec.exe -ArgumentList "/i", $installerPath, "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue

      - name: Establish Tailscale Connection
        shell: pwsh
        env:
          # pass secret auth key into the script through env var (set in job env above)
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $tsExe = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
          if (-not (Test-Path $tsExe)) {
            Write-Error "Tailscale executable not found at $tsExe"
            exit 1
          }

          # Use env var for authkey. Set hostname to include run id for uniqueness
          $hostname = "gh-runner-$($env:GITHUB_RUN_ID)"
          & $tsExe up --authkey="$env:TAILSCALE_AUTH_KEY" --hostname="$hostname"

          # Wait for Tailscale IPv4 to appear
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 12) {
              Start-Sleep -Seconds 5
              $ipOut = & $tsExe ip -4
              # ip -4 might return multiple addresses; take first IP-like token
              if ($ipOut) {
                # find first IPv4-looking substring
                $match = ($ipOut | Select-String -Pattern '\d{1,3}(\.\d{1,3}){3}' -AllMatches).Matches | Select-Object -First 1
                if ($match) { $tsIP = $match.Value }
              }
              $retries++
          }

          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned. Exiting."
              exit 1
          }

          # Export to GITHUB_ENV for later steps
          Add-Content -Path $env:GITHUB_ENV -Value ("TAILSCALE_IP=$tsIP")
          Write-Host "Tailscale IP: $tsIP"

      - name: Verify RDP Accessibility
        shell: pwsh
        run: |
          $tsIP = $env:TAILSCALE_IP
          if (-not $tsIP) {
            Write-Error "TAILSCALE_IP missing"
            exit 1
          }

          Write-Host "Testing TCP connectivity to $tsIP:3389"
          $testResult = Test-NetConnection -ComputerName $tsIP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port 3389 failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection (keep runner alive)
        shell: pwsh
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          # Avoid printing passwords in logs in real scenarios â€” shown here only because user requested full info.
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"

          # Keep runner active until manually cancelled (be careful and understand policy implications)
          while ($true) {
              Write-Host "[$(Get-Date -Format o)] RDP Active - cancel workflow to terminate"
              Start-Sleep -Seconds 300
          }
